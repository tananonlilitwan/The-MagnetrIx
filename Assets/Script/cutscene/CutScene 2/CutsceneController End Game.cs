using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class CutsceneControllerEndGame : MonoBehaviour
{
    public Image[] cutsceneImages; // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 4 ‡∏£‡∏π‡∏õ
    [SerializeField] float fadeDuration; // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ü‡∏î
    [SerializeField] float delayBetweenImages; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    [SerializeField] private GameObject panelCutsceneENDGame; // Panel ‡∏Ç‡∏≠‡∏á Cutscene
    [SerializeField] private GameObject WinPanel; // Panel ‡∏Ç‡∏≠‡∏á Credit ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Cutscene ‡πÄ‡∏™‡∏£‡πá‡∏à
    [SerializeField] private GameObject panelGameSystem; // Panel ‡∏Ç‡∏≠‡∏á Game System
    [SerializeField] private GameObject panel_UIGame_Playe; // Panel ‡∏Ç‡∏≠‡∏á UIGame_Playe

    private bool hasWinPanelBeenOpened = false;

    private void Start()
    {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        foreach (Image img in cutsceneImages)
        {
            Color tempColor = img.color;
            tempColor.a = 0f;
            img.color = tempColor;
        }
        
        StartCoroutine(PlayCutscene());
    }

    void Update()
    {
        if (WinPanel != null)
        {
            if (!WinPanel.activeSelf)
            {
                Debug.LogError("‚ö†Ô∏è ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏õ‡∏¥‡∏î WinPanel ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î!", WinPanel);

                // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏õ‡∏¥‡∏î‡∏°‡∏±‡∏ô
                GameObject[] allObjects = GameObject.FindObjectsOfType<GameObject>();
                foreach (var obj in allObjects)
                {
                    if (obj.activeSelf == false && obj == WinPanel)
                    {
                        Debug.LogError($"üîé {obj.name} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏!", obj);
                    }
                }
            }
        }
    }


    private IEnumerator PlayCutscene()
    {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á Cutscene ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô Cutscene
        AudioManager.Instance.PlayCutsceneSound(); 
        
        for (int i = 0; i < cutsceneImages.Length; i++)
        {
            yield return StartCoroutine(FadeIn(cutsceneImages[i]));
            yield return new WaitForSeconds(delayBetweenImages);
        }
        
        EndCutscene2();
    }

    private IEnumerator FadeIn(Image image)
    {
        float elapsedTime = 0f;
        Color tempColor = image.color;

        while (elapsedTime < fadeDuration)
        {
            tempColor.a = Mathf.Lerp(0f, 1f, elapsedTime / fadeDuration);
            image.color = tempColor;
            elapsedTime += Time.deltaTime;
            yield return null;
        }
        
        tempColor.a = 1f;
        image.color = tempColor;
    }
    
    private void EndCutscene2()
    {
        Debug.Log("EndCutscene2 Called!");
    
        if (WinPanel != null)
        {
            Debug.Log("WinPanel is not null, activating now...");
            ShowWinPanel();
        }
        else
        {
            Debug.LogError("WinPanel is NULL! Please assign it in the Inspector.");
        }
    
        panelCutsceneENDGame?.SetActive(false);
        panelGameSystem?.SetActive(false);
        panel_UIGame_Playe?.SetActive(false);
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö Cutscene
        AudioManager.Instance.mainAudioSource.Stop(); // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á Win ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.PlayWinSound(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏ô‡∏∞
        }
    }

    private void ShowWinPanel()
    {
        if (WinPanel != null)
        {
            WinPanel.SetActive(true);
            hasWinPanelBeenOpened = true;
            Debug.Log("‚úÖ WinPanel Activated: " + WinPanel.activeSelf);
        }
        else
        {
            Debug.LogError("‚ùå WinPanel is NULL! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ");
        }
    }
}

