using UnityEngine;
using System.Collections.Generic;
using UnityEngine.UI;
public class Player_controller2 : MonoBehaviour
{
    [Header("Control Movement")]
    public float moveSpeed = 5f; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    public float groundStickForce = 5f; // ‡πÅ‡∏£‡∏á‡∏¢‡∏∂‡∏î‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
    public float edgeSnapDistance = 0.2f; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô
    private Rigidbody2D rb2d; // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Rigidbody2D

    private bool isOnGround = false; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    private Vector2 groundNormal; // ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á Normal ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô
    
    [Header("Control Settings")]
    [SerializeField] private Transform absorbPoint; // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    [SerializeField] private float absorbRange; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    [SerializeField] private GameObject[] absorbableObjects; // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ
    [SerializeField] private float sizeIncreaseFactor; // ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Player ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏¥‡πâ‡∏ô //0.6
    [SerializeField] private Image[] absorbCountImages; // Array ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û UI
    [SerializeField] private int maxAbsorbableObjects; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ
    
    private bool canAbsorb = true; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤ Player ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    private float absorbCooldown = 3f; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î (‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    private float currentCooldownTime = 0f; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î
    
    private Rigidbody2D rb;
    private bool isGrounded = false;
    private List<GameObject> absorbedObjects = new List<GameObject>(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏π‡∏î

    private float initialScale; // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player
    
    [Header("Weight Settings")]
    [SerializeField] private float weightIncreasePerObject; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î
    private float weight; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Player
    [SerializeField] private float baseWeight; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player
    
    private float initialColliderRadius; //‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Collider
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Player ‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á
    private bool isFalling = false;
    
    //[Header("--------------------------")]
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ playerMass
    [SerializeField] public float playerMass;

    void Start()
    {
        rb2d = GetComponent<Rigidbody2D>();
        if (rb2d == null)
        {
            Debug.LogError("Rigidbody2D is missing from the Player object! Please add a Rigidbody2D.");
        }
        Rigidbody2D playerRb = GetComponent<Rigidbody2D>();
        if (playerRb != null)
        {
            playerRb.mass = 1f; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏ß‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player ‡πÄ‡∏õ‡πá‡∏ô 1
        }
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏ß‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player
        playerMass = rb2d.mass;
        
        UpdateAbsorbCountUI();

    }

    //public GameObject pausePanel; // Panel ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏´‡∏¢‡∏∏‡∏î
    //private int currentIndex = 0;
    
    void Update()
    {
        Movement();
        
        //-------------------
        AbsorbObjects(); // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        HandleReleaseObjects();
        
        if (!canAbsorb)
        {
            currentCooldownTime -= Time.deltaTime; // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á
            if (currentCooldownTime <= 0f)
            {
                canAbsorb = true; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                Debug.Log("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
            }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Player ‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå
        if (Input.GetMouseButtonDown(0)) // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ã‡πâ‡∏≤‡∏¢ (Mouse0)
        {
            StopAbsorbingAndFall();
            
        }
        
    }
    
    private void StopAbsorbingAndFall()
    { 
        canAbsorb = false;
        rb2d.gravityScale = 1f; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Player ‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á

        foreach (GameObject obj in absorbedObjects)
        {
            obj.transform.parent = null;
            obj.SetActive(true);

            Rigidbody2D objRb = obj.GetComponent<Rigidbody2D>();
            if (objRb != null)
            {
                objRb.simulated = true;
                objRb.gravityScale = 1f;
            }
        }

        absorbedObjects.Clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡∏ï‡∏¥‡∏î
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ Player ‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á
        rb2d.velocity = new Vector2(rb2d.velocity.x, -1f); 

        UpdateAbsorbCountUI(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        UpdatePlayerCollider(); // üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î Collider ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢ Obj

        currentCooldownTime = absorbCooldown;
        Debug.Log("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏ß‡∏á‡∏•‡∏á‡πÑ‡∏õ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ");
    }
    
    private void Movement()
    {
        if (!isOnGround) return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô

        // ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        float horizontal = Input.GetAxisRaw("Horizontal");
        float vertical = Input.GetAxisRaw("Vertical");

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        Vector2 inputDirection = new Vector2(horizontal, vertical);

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
        Vector2 moveDirection = AdjustMovementToGround(inputDirection) * moveSpeed;

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏´‡∏°‡πà
        rb2d.velocity = moveDirection;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏£‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏´‡πâ Player ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
        StickToGround();
        
        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
        float adjustedSpeed = moveSpeed / (1 + weight / 100);
        
        // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ targetVelocityX, targetVelocityY
        float targetVelocityX = moveDirection.x;
        float targetVelocityY = moveDirection.y;
        
        float newVelocityX = targetVelocityX * adjustedSpeed;
        
        // ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if (newVelocityX != 0)
        {
            // ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß Player ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏¥‡πâ‡∏á
            float rotationSpeed = 360f; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô (‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            transform.Rotate(0, 0, -targetVelocityX * rotationSpeed * Time.deltaTime);

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ Player ‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤
            transform.localScale = new Vector3(
                targetVelocityX > 0 ? Mathf.Abs(transform.localScale.x) : -Mathf.Abs(transform.localScale.x),
                transform.localScale.y,
                transform.localScale.z
            );
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡∏¥‡∏î Player ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô
        if (absorbedObjects.Count > 0) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö Player ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        {
            AudioManager.Instance.PlayWalkWithObjectSound(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö Player
        }
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏û‡∏∑‡πâ‡∏ô
    Vector2 AdjustMovementToGround(Vector2 inputDirection)
    {
        // ‡πÇ‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ô‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
        Vector2 tangent = Vector2.Perpendicular(groundNormal);
        return Vector2.Dot(inputDirection, tangent) * tangent.normalized;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏£‡∏á‡∏î‡∏π‡∏î‡πÉ‡∏´‡πâ Player ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
    void StickToGround()
    {
        if (!isOnGround) return;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô TrashObject
        if (isOnGround && !IsOnTrashObject())
        {
            // ‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Normal ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Player ‡πÑ‡∏°‡πà‡∏ï‡∏Å
            Vector2 stickForce = -groundNormal * groundStickForce;
            rb2d.AddForce(stickForce, ForceMode2D.Force);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á Raycast
            RaycastHit2D hit = Physics2D.Raycast(transform.position, -groundNormal, edgeSnapDistance, LayerMask.GetMask("Ground"));
            if (hit.collider != null)
            {
                // ‡∏ñ‡πâ‡∏≤ Raycast ‡πÄ‡∏à‡∏≠‡∏û‡∏∑‡πâ‡∏ô ‡∏Å‡πá‡∏à‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Player ‡∏ï‡∏¥‡∏î‡∏Ç‡∏≠‡∏ö
                rb2d.velocity = new Vector2(rb2d.velocity.x, Mathf.Max(rb2d.velocity.y, 0f));
            }
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Player ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö TrashObject ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    bool IsOnTrashObject()
    {
        return GetComponent<Collider2D>().IsTouchingLayers(LayerMask.GetMask("TrashObject"));
    }
    
    void OnCollisionStay2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isOnGround = true;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Normal ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏ô
            Vector2 normalSum = Vector2.zero;
            foreach (ContactPoint2D contact in collision.contacts)
            {
                normalSum += contact.normal;
            }
            groundNormal = normalSum.normalized;
        }
        else if (collision.gameObject.CompareTag("TrashObject"))
        {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏Å‡∏±‡∏ö "TrashObject", ‡πÉ‡∏´‡πâ Player ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∂‡∏î‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ `groundNormal` ‡∏´‡∏£‡∏∑‡∏≠ `isOnGround` ‡∏Å‡∏±‡∏ö TrashObject
        }
    }
    void OnCollisionExit2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isOnGround = false;
        }
        else if (collision.gameObject.CompareTag("TrashObject"))
        {
            // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö "TrashObject" ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Player ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
        }
    }
    
    #region <HandleReleaseObjects> //‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π‡∏î‡∏°‡∏≤
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    private void HandleReleaseObjects()
    {
        if (Input.GetKeyDown(KeyCode.E) && absorbedObjects.Count > 0) // ‡∏Å‡∏î E ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        {
            GameObject obj = absorbedObjects[absorbedObjects.Count - 1];
            absorbedObjects.RemoveAt(absorbedObjects.Count - 1);

            obj.transform.parent = null; // ‡πÅ‡∏¢‡∏Å Obj ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Player
            obj.SetActive(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏

            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏Ç‡∏≠‡∏á Obj
            Rigidbody2D objRb = obj.GetComponent<Rigidbody2D>();
            if (objRb != null)
            {
                objRb.simulated = true; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
                Vector2 throwDirection = (obj.transform.position - transform.position).normalized; // ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢
                objRb.velocity = throwDirection * 5f; // ‡∏õ‡∏£‡∏±‡∏ö 5f ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

                // ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                weight -= objRb.mass; 
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á CircleCollider2D
            UpdatePlayerCollider();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            UpdateAbsorbCountUI(); 

            // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (Cooldown)
            canAbsorb = false;
            currentCooldownTime = absorbCooldown; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ absorbCooldown (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        
            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á Collider ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            Collider2D objCollider = obj.GetComponent<Collider2D>();
            Collider2D playerCollider = GetComponent<Collider2D>();

            if (objCollider != null)
            {
                objCollider.enabled = true; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Collider ‡∏Ç‡∏≠‡∏á Obj
                Debug.Log($"‡πÄ‡∏õ‡∏¥‡∏î Collider ‡∏Ç‡∏≠‡∏á {obj.name} ‡πÅ‡∏•‡πâ‡∏ß"); // Debug Log
            }

            if (objCollider != null && playerCollider != null)
            {
                Physics2D.IgnoreCollision(objCollider, playerCollider, false); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                Debug.Log($"‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {obj.name} ‡πÅ‡∏•‡∏∞ Player");
            }

            Debug.Log("‡πÇ‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏≠‡∏Å: " + obj.name);
        }
    }

    #endregion
    
    #region <AbsorbObjects> //‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    private void AbsorbObjects()
    {
        if (!canAbsorb) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö Player ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ absorbRange
        Collider2D[] hits = Physics2D.OverlapCircleAll(transform.position, absorbRange);

        foreach (Collider2D hit in hits)
        {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô
            //if (hit.CompareTag("Ground")) continue; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î
        
            if (IsAbsorbable(hit.gameObject))
            {
                GameObject obj = hit.gameObject;

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ Obj ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö Player ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                obj.transform.parent = this.transform; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Obj ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á Player
                float angle = Random.Range(0, 360); // ‡∏°‡∏∏‡∏°‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß Player
                float radius = Random.Range(0.5f, 1.0f); // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Player
                obj.transform.localPosition = new Vector3(
                    Mathf.Cos(angle * Mathf.Deg2Rad) * radius,
                    Mathf.Sin(angle * Mathf.Deg2Rad) * radius,
                    0
                );

                // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏Ç‡∏≠‡∏á Obj
                Rigidbody2D objRb = obj.GetComponent<Rigidbody2D>();
                if (objRb != null)
                {
                    objRb.simulated = false; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
                }

                // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Player ‡πÅ‡∏•‡∏∞ Obj
                Collider2D objCollider = obj.GetComponent<Collider2D>();
                Collider2D playerCollider = GetComponent<Collider2D>();
                if (objCollider != null && playerCollider != null)
                {
                    Physics2D.IgnoreCollision(objCollider, playerCollider, true); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö Player
                }

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° Obj ‡πÄ‡∏Ç‡πâ‡∏≤ List ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ
                absorbedObjects.Add(obj);

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏ß‡∏•‡∏Ç‡∏≠‡∏á Player
                UpdatePlayerMass();

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î Collider ‡∏Ç‡∏≠‡∏á Player
                UpdatePlayerCollider();

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á Player ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                Rigidbody2D playerRb = GetComponent<Rigidbody2D>();
                if (playerRb != null)
                {
                    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Player ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏´‡∏•‡∏•‡∏á, ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
                    playerRb.gravityScale = 0.5f;  // ‡∏•‡∏î‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                }
                
                Debug.Log("‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏: " + obj.name);
                UpdateAbsorbCountUI(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI

                return;
            }
        }

         // Debug.Log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡∏π‡∏î");
    }
    #endregion
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏•‡∏Ç‡∏≠‡∏á Player
    private void UpdatePlayerMass()
    { 
        if (rb == null) return;

        float baseMass = 1f; // ‡∏°‡∏ß‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player
        float massPerObject = 1f; // ‡∏°‡∏ß‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ 1 ‡∏ä‡∏¥‡πâ‡∏ô

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà
        rb.mass = baseMass + (absorbedObjects.Count * massPerObject);

        Debug.Log("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏•‡∏Ç‡∏≠‡∏á Player: " + rb.mass);

        Debug.Log("UpdatePlayerMass ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å");  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

        if (rb == null) return;

        rb.mass = baseMass + (absorbedObjects.Count * massPerObject);
        Debug.Log("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏•‡∏Ç‡∏≠‡∏á Player: " + rb.mass);
    }
    
    #region <UpdatePlayerCollider> //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á CircleCollider2D
    private void UpdatePlayerCollider() //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á CircleCollider2D
    {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
        float newScale = 1f + (weight / 100f); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
        transform.localScale = new Vector3(newScale, newScale, 1f);

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Collider2D ‡πÄ‡∏ä‡πà‡∏ô CircleCollider2D
        CircleCollider2D collider = GetComponent<CircleCollider2D>();
        if (collider != null)
        {
            collider.radius = initialColliderRadius * newScale; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏±‡∏®‡∏°‡∏µ Collider
        }
        
        CircleCollider2D playerCollider = GetComponent<CircleCollider2D>();

        if (playerCollider != null)
        {
            float initialRadius = 0.5f; // ‡∏Ç‡∏ô‡∏≤‡∏î Collider ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

            if (absorbedObjects.Count == 0) 
            {
                playerCollider.radius = initialRadius; // üìå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Obj ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡∏ï‡∏¥‡∏î ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            }
            else
            {
                float maxDistance = 0f;

                foreach (GameObject obj in absorbedObjects)
                {
                    float distance = Vector3.Distance(transform.position, obj.transform.position);
                    if (distance > maxDistance)
                    {
                        maxDistance = distance;
                    }
                }

                float newRadius = maxDistance + 0.3f;
                playerCollider.radius = Mathf.Max(newRadius, initialRadius);
            }

            Debug.Log("‡∏Ç‡∏ô‡∏≤‡∏î Collider ‡πÉ‡∏´‡∏°‡πà: " + playerCollider.radius);
        }
    }
    #endregion
    
    #region <IsAbsorbable> //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà 
    private bool IsAbsorbable(GameObject obj)  //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà 
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ obj ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô absorbableObjects ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        foreach (GameObject absorbable in absorbableObjects)
        {
            if (obj == absorbable)
            {
                return true;
            }
        }
        return false;
    }
    #endregion

    
    #region <OnDrawGizmos> //Editor ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    private void OnDrawGizmos() //Editor ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
    {
        if (absorbPoint == null) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ absorbPoint ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô Scene
        Gizmos.color = Color.blue;
        Gizmos.DrawWireSphere(absorbPoint.position, absorbRange);
    }
    #endregion
    
    //--------------------------------------------------------------------------------------------------------
    
    [Header("Hp Settings")]
    [SerializeField] public Image[] hpImages; // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û HP ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    [SerializeField] int hp; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô HP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    [SerializeField] private int maxHp = 4; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ HP ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Player

    
    [Header("Trash Can Settings")]
    //[SerializeField] private TrashCan trashCan; // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á TrashCan ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    
    [Header("Lose Game Settings")]
    [SerializeField] private GameObject loseCanvas; // Canvas Lose
    [SerializeField] private GameObject gamePlayCanvas; // Canvas Game Play
    
    
    #region <UpdateAbsorbCountUI> //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π‡∏î‡∏°‡∏≤
    private void UpdateAbsorbCountUI() //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏π‡∏î‡∏°‡∏≤
    {
        // ‡∏ã‡πà‡∏≠‡∏ô UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        foreach (Image img in absorbCountImages)
        {
            img.enabled = false; // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î UI ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ
        for (int i = 0; i < absorbedObjects.Count && i < absorbCountImages.Length; i++)
        {
            absorbCountImages[i].enabled = true;
        }
    }
    #endregion
    
    #region <OnTriggerEnter2D> //‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö Trigger
    private void OnTriggerEnter2D(Collider2D other) //‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö Trigger
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡∏õ (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏Å‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏•‡∏∏‡∏°)
        if (other.CompareTag("FallTrigger")) // FallTrigger ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡∏õ
        {
            // ‡πÉ‡∏´‡πâ Player ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            for (int i = Checkpoint.checkpointReached.Length - 1; i >= 0; i--)
            {
                if (Checkpoint.checkpointReached[i]) 
                {
                    transform.position = Checkpoint.checkpointPositions[i]; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    Debug.Log("Player fell. Respawning at checkpoint " + (i + 1));
                    break;
                }
            }
        }
        
        if (other.CompareTag("Trap")) // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å
        {
            // ‡∏•‡∏î HP ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
            hp--;
            UpdateHPUI();

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤ HP ‡∏´‡∏°‡∏î (Game Over)
            if (hp <= 0)
            {
                Debug.Log("Game Over!");
                // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π Game Over ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            }
            
            for (int i = Checkpoint.checkpointReached.Length - 1; i >= 0; i--)
            {
                if (Checkpoint.checkpointReached[i]) 
                {
                    transform.position = Checkpoint.checkpointPositions[i]; // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    Debug.Log("Player fell. Respawning at checkpoint " + (i + 1));
                    break;
                }
            }
        }
    }
    #endregion
    
    public int GetHealth()
    {
        return hp; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á HP
    }
    
    #region <UpdateHPUI> //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á HP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    private void UpdateHPUI() //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á HP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    {
        for (int i = 0; i < hpImages.Length; i++)
        {
            if (i < hp)
            {
                hpImages[i].gameObject.SetActive(true); // ‡πÄ‡∏õ‡∏¥‡∏î GameObject
            }
            else
            {
                hpImages[i].gameObject.SetActive(false); // ‡∏õ‡∏¥‡∏î GameObject
            }
        }
    
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HP ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Game Over ‡∏ñ‡πâ‡∏≤ HP ‡∏´‡∏°‡∏î
        if (hp <= 0)
        {
            HandleGameOver(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°
        }
        
    }
    #endregion
    
    #region <HandleGameOver> //‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ HP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Game Over
    private void HandleGameOver() //‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ HP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Game Over
    {
        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°
        Time.timeScale = 0f;

        // ‡πÅ‡∏™‡∏î‡∏á Canvas Lose
        if (loseCanvas != null)
        {
            loseCanvas.SetActive(true);
        }

        // ‡∏ã‡πà‡∏≠‡∏ô Canvas Game Play
        if (gamePlayCanvas != null)
        {
            gamePlayCanvas.SetActive(false);
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á Game Over
        AudioManager.Instance.PlayGameOverSound();
        
        Debug.Log("Game Over! HP ‡∏´‡∏°‡∏î.");
    }
    #endregion
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Reset ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Player
    public void ResetPlayerStats()
    {
        hp = maxHp; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ HP
        UpdateHPUI(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI HP ‡πÉ‡∏´‡∏°‡πà

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡∏ã‡∏±‡∏ö‡∏°‡∏≤
        foreach (GameObject obj in absorbedObjects)
        {
            if (obj != null)
            {
                obj.transform.SetParent(null); // ‡∏õ‡∏•‡∏î‡∏à‡∏≤‡∏Å Parent
                Destroy(obj); // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            }
        }

        absorbedObjects.Clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤

        UpdatePlayerMass(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        UpdatePlayerCollider(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Collider ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï

        Debug.Log("ResetPlayerStats() -> Clear absorbedObjects, Count: " + absorbedObjects.Count);
    }
    
    public void ResetPlayerMass()
    {
        rb.mass = 1f; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏°‡∏ß‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
    }

    public void ResetPlayerCollider()
    {
        CircleCollider2D collider = GetComponent<CircleCollider2D>();
        if (collider != null)
        {
            collider.radius = initialColliderRadius; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î Collider
        }
    }

    public void ClearAbsorbedObjects()
    {
        foreach (GameObject obj in absorbedObjects)
        {
            if (obj != null)
            {
                obj.transform.SetParent(null);
                Destroy(obj);
            }
        }

        absorbedObjects.Clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        UpdatePlayerMass(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà
        UpdatePlayerCollider(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Collider ‡πÉ‡∏´‡∏°‡πà

        Debug.Log("ClearAbsorbedObjects() -> Cleared objects, Count: " + absorbedObjects.Count);
    }
}